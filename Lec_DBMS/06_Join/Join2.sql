-- non equi JOIN
SELECT * FROM T_CUSTOMER ;

SELECT * FROM T_GIFT ;

-- #6201
-- oracle
SELECT c.C_NAME 고객명, c.C_POINT POINT, g.G_NAME 상품명
FROM T_CUSTOMER c, T_GIFT g
WHERE c.C_POINT BETWEEN g.G_START AND g.G_END ;
-- ansi
SELECT c.C_NAME 고객명, c.C_POINT POINT, g.G_NAME 상품명
FROM T_CUSTOMER c join T_GIFT g
on c.C_POINT BETWEEN g.G_START AND g.G_END ;

-- #6202
-- oracle
SELECT g.G_NAME 상품명, COUNT(c.C_POINT) 필요수량
FROM T_CUSTOMER c, T_GIFT g
WHERE c.C_POINT BETWEEN g.G_START AND g.G_END
GROUP BY g.G_NAME ;
-- ansi
SELECT g.G_NAME 상품명, COUNT(c.C_POINT) 필요수량
FROM T_CUSTOMER c JOIN T_GIFT g
ON c.C_POINT BETWEEN g.G_START AND g.G_END
GROUP BY g.G_NAME ;

-- #6203
-- oracle
SELECT s.NAME 학생이름, e.TOTAL 점수, c.GRADE 학점
FROM T_STUDENT s, T_EXAM01 e, T_CREDIT c
WHERE e.TOTAL BETWEEN c.MIN_POINT AND c.MAX_POINT AND s.STUDNO = e.STUDNO
ORDER BY e.TOTAL DESC;
-- ansi
SELECT s.NAME 학생이름, e.TOTAL 점수, c.GRADE 학점
FROM T_STUDENT s JOIN T_EXAM01 e ON s.STUDNO = e.STUDNO
JOIN T_CREDIT c ON e.TOTAL BETWEEN c.MIN_POINT AND c.MAX_POINT  
ORDER BY e.TOTAL DESC; 
 
-- #6204
-- oracle
SELECT c.C_NAME 고객명, c.C_POINT POINT, g.G_NAME 상품명
FROM T_CUSTOMER c,T_GIFT g
WHERE c.C_POINT >= g.G_START AND g.G_NAME = '산악용자전거';
-- ansi
SELECT c.C_NAME 고객명, c.C_POINT POINT, g.G_NAME 상품명
FROM T_CUSTOMER c JOIN T_GIFT g
ON c.C_POINT >= g.G_START AND g.G_NAME = '산악용자전거';

-- #6205
-- oracle
SELECT e.NAME 이름, TO_CHAR(SYSDATE, 'rrrr') - TO_CHAR(e.BIRTHDAY, 'rrrr') + 1 현재나이, NVL(e.POST, ' ') 현재직급, p.POST 예상직급 
FROM T_EMP2 e, T_POST p
WHERE TO_CHAR(SYSDATE, 'rrrr') - TO_CHAR(e.BIRTHDAY, 'rrrr') + 1 BETWEEN p.S_AGE AND p.E_AGE;
--ORDER BY TO_CHAR(SYSDATE, 'rrrr') - TO_CHAR(e.BIRTHDAY, 'rrrr') + 1 DESC;
-- ansi
SELECT e.NAME 이름, TO_CHAR(SYSDATE, 'rrrr') - TO_CHAR(e.BIRTHDAY, 'rrrr') + 1 현재나이, NVL(e.POST, ' ') 현재직급, p.POST 예상직급 
FROM T_EMP2 e JOIN T_POST p
ON TO_CHAR(SYSDATE, 'rrrr') - TO_CHAR(e.BIRTHDAY, 'rrrr') + 1 BETWEEN p.S_AGE AND p.E_AGE;
--ORDER BY TO_CHAR(SYSDATE, 'rrrr') - TO_CHAR(e.BIRTHDAY, 'rrrr') + 1 DESC;

-- outer join은 oracle 없음..
-- #6206
SELECT s.NAME 학생이름, NVL(p.NAME, ' ') 교수이름
FROM T_STUDENT s LEFT OUTER JOIN  T_PROFESSOR p
ON s.PROFNO = p.PROFNO;
-- #6207
SELECT NVL(s.NAME, ' ') 학생이름, p.NAME 교수이름
FROM T_STUDENT s RIGHT OUTER JOIN  T_PROFESSOR p
ON s.PROFNO = p.PROFNO;
-- #6208
SELECT NVL(s.NAME, ' ') 학생이름, NVL(p.NAME, ' ') 교수이름
FROM T_STUDENT s FULL OUTER JOIN  T_PROFESSOR p
ON s.PROFNO = p.PROFNO;
-- #6209
-- oracle
SELECT d1.DNAME 부서명, d2.DNAME 상위부서명
FROM T_DEPT2 d1, T_DEPT2 d2
WHERE d1.PDEPT = d2.DCODE;
-- ansi
SELECT d1.DNAME 부서명, d2.DNAME 상위부서명
FROM T_DEPT2 d1 JOIN T_DEPT2 d2
ON d1.PDEPT = d2.DCODE;
-- #6210
SELECT p1.PROFNO 교수번호, p1.NAME 교수명, p1.HIREDATE 입사일, COUNT(p2.HIREDATE) 빠른사람
FROM T_PROFESSOR p1 LEFT OUTER JOIN T_PROFESSOR p2 ON p1.HIREDATE > p2.HIREDATE
GROUP BY p1.PROFNO, p1.NAME, p1.HIREDATE 입사일 ;
--ORDER BY COUNT(p1.HIREDATE > p2.HIREDATE) ASC;


